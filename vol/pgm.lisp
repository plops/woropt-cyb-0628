(in-package :vol)

(defun read-pgm (filename)
  (declare ((or pathname string) filename)
	   (values (or (simple-array (unsigned-byte 8) 2)
		       (simple-array (unsigned-byte 16) 2)) &optional))
  (with-open-file (s filename)
    (unless (equal (symbol-name (read s)) "P5")
      (error "no PGM file"))
    (let* ((w (read s))
	   (h (read s))
	   (grays (read s))
	   (pos (file-position s)))
      (declare ((integer 0 65535) grays w h))
      (let* ((type (if (<= grays 255)
		       '(unsigned-byte 8)
		       '(unsigned-byte 16)))
	     (data (make-array (list h w)
			       :element-type type))
	     (data-1d (make-array (* h w)
				  :element-type type
				  :displaced-to data)))
	(with-open-file (s2 filename :element-type type)
	  (file-position s2 pos)
	  (read-sequence data-1d s2))
       	data))))

 
(defun write-pgm (filename img)
  (declare (simple-string filename)
	   ((array (unsigned-byte 8) 2) img)
	   (values null &optional))
  (destructuring-bind (h w)
      (array-dimensions img)
    (declare ((integer 0 65535) w h))
    (with-open-file (s filename
		       :direction :output
		       :if-exists :supersede
		       :if-does-not-exist :create)
      (declare (stream s))
      (format s "P5~%~D ~D~%255~%" w h))
    (with-open-file (s filename 
		       :element-type '(unsigned-byte 8)
		       :direction :output
		       :if-exists :append)
      (let ((data-1d (make-array 
		      (* h w)
		      :element-type '(unsigned-byte 8)
		      :displaced-to img)))
	(write-sequence data-1d s)))
    nil))

(defun read-stack (fn)
  (declare (string fn)
	   (values (simple-array (unsigned-byte 8) 3) &optional))
  (let* ((files (directory fn))
	 (slices (length files))
	 (a (read-pgm (first files))))
    (destructuring-bind (h w)
	(array-dimensions a)
      (let* ((result (make-array (list slices h w)
				 :element-type '(unsigned-byte 8))))
	(dotimes (k slices)
	  (let* ((a (read-pgm (elt files k))))
	    (dotimes (j h)
	      (dotimes (i w)
		(setf (aref result k j i)
		      (aref a j i))))))
	result))))

(defun save-stack-ub8 (fn vol)
  (declare (string fn)
	   ((simple-array (unsigned-byte 8) 3) vol)
	   (values null &optional))
  (ensure-directories-exist (if (eq (1- (length fn))
				    (position #\/ fn :from-end t))
				fn
				(format nil "~a/" fn)))
  (destructuring-bind (z y x)
      (array-dimensions vol)
    (let ((b (make-array (list y x)
			 :element-type '(unsigned-byte 8))))
      (dotimes (k z)
	(do-region ((j i) (y x))
	  (setf (aref b j i)
		(aref vol k j i)))
	(write-pgm (format nil "~a/~3,'0d.pgm" fn k) b))))
  nil)